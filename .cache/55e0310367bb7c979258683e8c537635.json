{"dependencies":[{"name":"./index.vue"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _index = require(\"./index.vue\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar defaults = {\n  title: '',\n  content: '',\n  className: '',\n  timeout: 3000,\n  okFn: function okFn() {}\n};\nVue.component('cmui-notice', _index2.default);\nvar id = 'cmui-notice-' + _.uniqueId();\nvar CURRENT = null;\nvar timeHandle;\n$(function () {\n  $('<cmui-notice id=\"' + id + '\">').appendTo('body');\n  CURRENT = new Vue({\n    el: '#' + id\n  }).$children[0];\n});\n\nfunction Notice() {\n  var options = {};\n  if (arguments) {\n    if (arguments.length > 1) {\n      options.okFn = _.filter(arguments, _.isFunction)[0];\n      var stringList = _.filter(arguments, function (item) {\n        return (typeof item === \"undefined\" ? \"undefined\" : _typeof(item)).match(/string|number|boolean/);\n      }).map(function (item) {\n        return item.toString();\n      });\n      options.content = stringList[0];\n      if (stringList.length > 1) {\n        options.timeout = _.last(_.filter(arguments, _.isNumber)) | 0;\n      }\n    } else {\n      if (_typeof(arguments[0]).match(/string|number|boolean/)) {\n        options.content = arguments[0];\n      } else if (_.isObject(arguments[0])) {\n        options = arguments[0];\n      } else {\n        return CURRENT;\n      }\n    }\n  } else {\n    return CURRENT;\n  }\n  options = _.defaults(_.find(arguments, _.isPlainObject), options, defaults);\n  document.body.classList.add('overflow-h');\n  CURRENT.showCmuiDialog = true;\n  _.each(options, function (value, key) {\n    CURRENT[key] = value;\n  });\n  timeHandle && clearTimeout(timeHandle);\n  if (options.timeout) {\n    timeHandle = setTimeout(function () {\n      clearTimeout(timeHandle);\n      CURRENT.cancel();\n    }, options.timeout);\n  }\n};\nexports.default = Notice;"},"hash":"549933583ff2ab75a09c691282ced72c"}
{"dependencies":[{"name":"../support","loc":{"line":1,"column":43}},{"name":"../util","loc":{"line":2,"column":47}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.localData = undefined;\n\nvar _support = require(\"../support\");\n\nvar _util = require(\"../util\");\n\nlet sessionKey = 'tg_local_cache',\n    cache = _support.localStorage ? localStorage : false,\n    data = _support.localStorage ? JSON.parse(cache.getItem(sessionKey) || JSON.stringify({})) : {},\n    formatData = function () {\n  let d = {},\n      t = new Date().getTime();\n  for (let i in data) {\n    if (t - data[i].t < data[i].time || !data[i].time) {\n      d[i] = data[i].value;\n    }\n  }\n  return d;\n},\n    localData = function () {\n  let length = arguments.length,\n      d = {},\n      t = new Date().getTime();\n  if (!length) {\n    return formatData();\n  } else if (length === 1) {\n    if ((0, _util.isObject)(arguments[0])) {\n      for (let i in arguments[0]) {\n        d[i] = { value: arguments[0][i], time: 0, t: t };\n      }\n      data = Object.assign({}, data, d);\n      cache && cache.setItem(sessionKey, JSON.stringify(data));\n    } else {\n      return formatData()[arguments[0]];\n    }\n  } else if (length === 2) {\n    if ((0, _util.isObject)(arguments[0]) && (0, _util.isTimeStr)(arguments[1])) {\n      for (let i in arguments[0]) {\n        d[i] = { value: arguments[0][i], time: (0, _util.formatTimeStr)(arguments[1]), t: t };\n      }\n      data = Object.assign({}, data, d);\n    } else {\n      data[arguments[0]] = { value: arguments[1], time: 0, t: t };\n    }\n    cache && cache.setItem(sessionKey, JSON.stringify(data));\n  } else if (length === 3) {\n    d[arguments[0]] = { value: arguments[1], time: (0, _util.formatTimeStr)(arguments[2]), t: t };\n    data = Object.assign({}, data, d);\n    cache && cache.setItem(sessionKey, JSON.stringify(data));\n  }\n};\n\nlocalData.remove = function (key) {\n  let length = arguments.length;\n  if (!length) {\n    this.removeAll();\n  } else {\n    for (let i = 0; i < length; i++) {\n      data[arguments[i]] = undefined;\n      delete data[arguments[i]];\n    }\n    cache && cache.setItem(sessionKey, JSON.stringify(data));\n  }\n};\nlocalData.removeAll = function () {\n  data = {};\n  cache && cache.setItem(sessionKey, JSON.stringify(data));\n};\n\nexports.localData = localData;"},"hash":"3520f865db50df9779981561f82a8d94"}
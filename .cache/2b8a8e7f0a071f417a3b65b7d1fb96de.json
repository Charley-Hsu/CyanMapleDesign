{"dependencies":[],"generated":{"js":"\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**!\n * Sortable\n * @author\tRubaXa   <trash@rubaxa.org>\n * @license MIT\n */\n\n(function sortableModule(factory) {\n  \"use strict\";\n\n  if (typeof define === \"function\" && define.amd) {\n    define(factory);\n  } else if (typeof module != \"undefined\" && typeof module.exports != \"undefined\") {\n    module.exports = factory();\n  } else {\n    /* jshint sub:true */\n    window[\"Sortable\"] = factory();\n  }\n})(function sortableFactory() {\n  \"use strict\";\n\n  if (typeof window == \"undefined\" || !window.document) {\n    return function sortableError() {\n      throw new Error(\"Sortable.js requires a window with a document\");\n    };\n  }\n\n  var dragEl,\n      parentEl,\n      ghostEl,\n      cloneEl,\n      rootEl,\n      nextEl,\n      lastDownEl,\n      scrollEl,\n      scrollParentEl,\n      scrollCustomFn,\n      lastEl,\n      lastCSS,\n      lastParentCSS,\n      oldIndex,\n      newIndex,\n      activeGroup,\n      putSortable,\n      autoScroll = {},\n      tapEvt,\n      touchEvt,\n      moved,\n\n\n  /** @const */\n  R_SPACE = /\\s+/g,\n      R_FLOAT = /left|right|inline/,\n      expando = 'Sortable' + new Date().getTime(),\n      win = window,\n      document = win.document,\n      parseInt = win.parseInt,\n      $ = win.jQuery || win.Zepto,\n      Polymer = win.Polymer,\n      captureMode = false,\n      supportDraggable = !!('draggable' in document.createElement('div')),\n      supportCssPointerEvents = function (el) {\n    // false when IE11\n    if (!!navigator.userAgent.match(/Trident.*rv[ :]?11\\./)) {\n      return false;\n    }\n    el = document.createElement('x');\n    el.style.cssText = 'pointer-events:auto';\n    return el.style.pointerEvents === 'auto';\n  }(),\n      _silent = false,\n      abs = Math.abs,\n      min = Math.min,\n      savedInputChecked = [],\n      touchDragOverListeners = [],\n      _autoScroll = _throttle(function ( /**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl) {\n    // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\n    if (rootEl && options.scroll) {\n      var _this = rootEl[expando],\n          el,\n          rect,\n          sens = options.scrollSensitivity,\n          speed = options.scrollSpeed,\n          x = evt.clientX,\n          y = evt.clientY,\n          winWidth = window.innerWidth,\n          winHeight = window.innerHeight,\n          vx,\n          vy,\n          scrollOffsetX,\n          scrollOffsetY;\n\n      // Delect scrollEl\n      if (scrollParentEl !== rootEl) {\n        scrollEl = options.scroll;\n        scrollParentEl = rootEl;\n        scrollCustomFn = options.scrollFn;\n\n        if (scrollEl === true) {\n          scrollEl = rootEl;\n\n          do {\n            if (scrollEl.offsetWidth < scrollEl.scrollWidth || scrollEl.offsetHeight < scrollEl.scrollHeight) {\n              break;\n            }\n            /* jshint boss:true */\n          } while (scrollEl = scrollEl.parentNode);\n        }\n      }\n\n      if (scrollEl) {\n        el = scrollEl;\n        rect = scrollEl.getBoundingClientRect();\n        vx = (abs(rect.right - x) <= sens) - (abs(rect.left - x) <= sens);\n        vy = (abs(rect.bottom - y) <= sens) - (abs(rect.top - y) <= sens);\n      }\n\n      if (!(vx || vy)) {\n        vx = (winWidth - x <= sens) - (x <= sens);\n        vy = (winHeight - y <= sens) - (y <= sens);\n\n        /* jshint expr:true */\n        (vx || vy) && (el = win);\n      }\n\n      if (autoScroll.vx !== vx || autoScroll.vy !== vy || autoScroll.el !== el) {\n        autoScroll.el = el;\n        autoScroll.vx = vx;\n        autoScroll.vy = vy;\n\n        clearInterval(autoScroll.pid);\n\n        if (el) {\n          autoScroll.pid = setInterval(function () {\n            scrollOffsetY = vy ? vy * speed : 0;\n            scrollOffsetX = vx ? vx * speed : 0;\n\n            if ('function' === typeof scrollCustomFn) {\n              return scrollCustomFn.call(_this, scrollOffsetX, scrollOffsetY, evt);\n            }\n\n            if (el === win) {\n              win.scrollTo(win.pageXOffset + scrollOffsetX, win.pageYOffset + scrollOffsetY);\n            } else {\n              el.scrollTop += scrollOffsetY;\n              el.scrollLeft += scrollOffsetX;\n            }\n          }, 24);\n        }\n      }\n    }\n  }, 30),\n      _prepareGroup = function _prepareGroup(options) {\n    function toFn(value, pull) {\n      if (value === void 0 || value === true) {\n        value = group.name;\n      }\n\n      if (typeof value === 'function') {\n        return value;\n      } else {\n        return function (to, from) {\n          var fromGroup = from.options.group.name;\n\n          return pull ? value : value && (value.join ? value.indexOf(fromGroup) > -1 : fromGroup == value);\n        };\n      }\n    }\n\n    var group = {};\n    var originalGroup = options.group;\n\n    if (!originalGroup || (typeof originalGroup === \"undefined\" ? \"undefined\" : _typeof(originalGroup)) != 'object') {\n      originalGroup = { name: originalGroup };\n    }\n\n    group.name = originalGroup.name;\n    group.checkPull = toFn(originalGroup.pull, true);\n    group.checkPut = toFn(originalGroup.put);\n    group.revertClone = originalGroup.revertClone;\n\n    options.group = group;\n  };\n\n  /**\n   * @class  Sortable\n   * @param  {HTMLElement}  el\n   * @param  {Object}       [options]\n   */\n  function Sortable(el, options) {\n    if (!(el && el.nodeType && el.nodeType === 1)) {\n      throw 'Sortable: `el` must be HTMLElement, and not ' + {}.toString.call(el);\n    }\n\n    this.el = el; // root element\n    this.options = options = _extend({}, options);\n\n    // Export instance\n    el[expando] = this;\n\n    // Default options\n    var defaults = {\n      group: Math.random(),\n      sort: true,\n      disabled: false,\n      store: null,\n      handle: null,\n      scroll: true,\n      scrollSensitivity: 30,\n      scrollSpeed: 10,\n      draggable: /[uo]l/i.test(el.nodeName) ? 'li' : '>*',\n      ghostClass: 'sortable-ghost',\n      chosenClass: 'sortable-chosen',\n      dragClass: 'sortable-drag',\n      ignore: 'a, img',\n      filter: null,\n      preventOnFilter: true,\n      animation: 0,\n      setData: function setData(dataTransfer, dragEl) {\n        dataTransfer.setData('Text', dragEl.textContent);\n      },\n      dropBubble: false,\n      dragoverBubble: false,\n      dataIdAttr: 'data-id',\n      delay: 0,\n      forceFallback: false,\n      fallbackClass: 'sortable-fallback',\n      fallbackOnBody: false,\n      fallbackTolerance: 0,\n      fallbackOffset: { x: 0, y: 0 }\n    };\n\n    // Set default options\n    for (var name in defaults) {\n      !(name in options) && (options[name] = defaults[name]);\n    }\n\n    _prepareGroup(options);\n\n    // Bind all private methods\n    for (var fn in this) {\n      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n        this[fn] = this[fn].bind(this);\n      }\n    }\n\n    // Setup drag mode\n    this.nativeDraggable = options.forceFallback ? false : supportDraggable;\n\n    // Bind events\n    _on(el, 'mousedown', this._onTapStart);\n    _on(el, 'touchstart', this._onTapStart);\n    _on(el, 'pointerdown', this._onTapStart);\n\n    if (this.nativeDraggable) {\n      _on(el, 'dragover', this);\n      _on(el, 'dragenter', this);\n    }\n\n    touchDragOverListeners.push(this._onDragOver);\n\n    // Restore sorting\n    options.store && this.sort(options.store.get(this));\n  }\n\n  Sortable.prototype = /** @lends Sortable.prototype */{\n    constructor: Sortable,\n\n    _onTapStart: function _onTapStart( /** Event|TouchEvent */evt) {\n      var _this = this,\n          el = this.el,\n          options = this.options,\n          preventOnFilter = options.preventOnFilter,\n          type = evt.type,\n          touch = evt.touches && evt.touches[0],\n          target = (touch || evt).target,\n          originalTarget = evt.target.shadowRoot && evt.path[0] || target,\n          filter = options.filter,\n          startIndex;\n\n      _saveInputCheckedState(el);\n\n      // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\n      if (dragEl) {\n        return;\n      }\n\n      if (type === 'mousedown' && evt.button !== 0 || options.disabled) {\n        return; // only left button or enabled\n      }\n\n      target = _closest(target, options.draggable, el);\n\n      if (!target) {\n        return;\n      }\n\n      if (lastDownEl === target) {\n        // Ignoring duplicate `down`\n        return;\n      }\n\n      // Get the index of the dragged element within its parent\n      startIndex = _index(target, options.draggable);\n\n      // Check filter\n      if (typeof filter === 'function') {\n        if (filter.call(this, evt, target, this)) {\n          _dispatchEvent(_this, originalTarget, 'filter', target, el, startIndex);\n          preventOnFilter && evt.preventDefault();\n          return; // cancel dnd\n        }\n      } else if (filter) {\n        filter = filter.split(',').some(function (criteria) {\n          criteria = _closest(originalTarget, criteria.trim(), el);\n\n          if (criteria) {\n            _dispatchEvent(_this, criteria, 'filter', target, el, startIndex);\n            return true;\n          }\n        });\n\n        if (filter) {\n          preventOnFilter && evt.preventDefault();\n          return; // cancel dnd\n        }\n      }\n\n      if (options.handle && !_closest(originalTarget, options.handle, el)) {\n        return;\n      }\n\n      // Prepare `dragstart`\n      this._prepareDragStart(evt, touch, target, startIndex);\n    },\n\n    _prepareDragStart: function _prepareDragStart( /** Event */evt, /** Touch */touch, /** HTMLElement */target, /** Number */startIndex) {\n      var _this = this,\n          el = _this.el,\n          options = _this.options,\n          ownerDocument = el.ownerDocument,\n          dragStartFn;\n\n      if (target && !dragEl && target.parentNode === el) {\n        tapEvt = evt;\n\n        rootEl = el;\n        dragEl = target;\n        parentEl = dragEl.parentNode;\n        nextEl = dragEl.nextSibling;\n        lastDownEl = target;\n        activeGroup = options.group;\n        oldIndex = startIndex;\n\n        this._lastX = (touch || evt).clientX;\n        this._lastY = (touch || evt).clientY;\n\n        dragEl.style['will-change'] = 'transform';\n\n        dragStartFn = function dragStartFn() {\n          // Delayed drag has been triggered\n          // we can re-enable the events: touchmove/mousemove\n          _this._disableDelayedDrag();\n\n          // Make the element draggable\n          dragEl.draggable = _this.nativeDraggable;\n\n          // Chosen item\n          _toggleClass(dragEl, options.chosenClass, true);\n\n          // Bind the events: dragstart/dragend\n          _this._triggerDragStart(evt, touch);\n\n          // Drag start event\n          _dispatchEvent(_this, rootEl, 'choose', dragEl, rootEl, oldIndex);\n        };\n\n        // Disable \"draggable\"\n        options.ignore.split(',').forEach(function (criteria) {\n          _find(dragEl, criteria.trim(), _disableDraggable);\n        });\n\n        _on(ownerDocument, 'mouseup', _this._onDrop);\n        _on(ownerDocument, 'touchend', _this._onDrop);\n        _on(ownerDocument, 'touchcancel', _this._onDrop);\n        _on(ownerDocument, 'pointercancel', _this._onDrop);\n        _on(ownerDocument, 'selectstart', _this);\n\n        if (options.delay) {\n          // If the user moves the pointer or let go the click or touch\n          // before the delay has been reached:\n          // disable the delayed drag\n          _on(ownerDocument, 'mouseup', _this._disableDelayedDrag);\n          _on(ownerDocument, 'touchend', _this._disableDelayedDrag);\n          _on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);\n          _on(ownerDocument, 'mousemove', _this._disableDelayedDrag);\n          _on(ownerDocument, 'touchmove', _this._disableDelayedDrag);\n          _on(ownerDocument, 'pointermove', _this._disableDelayedDrag);\n\n          _this._dragStartTimer = setTimeout(dragStartFn, options.delay);\n        } else {\n          dragStartFn();\n        }\n      }\n    },\n\n    _disableDelayedDrag: function _disableDelayedDrag() {\n      var ownerDocument = this.el.ownerDocument;\n\n      clearTimeout(this._dragStartTimer);\n      _off(ownerDocument, 'mouseup', this._disableDelayedDrag);\n      _off(ownerDocument, 'touchend', this._disableDelayedDrag);\n      _off(ownerDocument, 'touchcancel', this._disableDelayedDrag);\n      _off(ownerDocument, 'mousemove', this._disableDelayedDrag);\n      _off(ownerDocument, 'touchmove', this._disableDelayedDrag);\n      _off(ownerDocument, 'pointermove', this._disableDelayedDrag);\n    },\n\n    _triggerDragStart: function _triggerDragStart( /** Event */evt, /** Touch */touch) {\n      touch = touch || (evt.pointerType == 'touch' ? evt : null);\n\n      if (touch) {\n        // Touch device support\n        tapEvt = {\n          target: dragEl,\n          clientX: touch.clientX,\n          clientY: touch.clientY\n        };\n\n        this._onDragStart(tapEvt, 'touch');\n      } else if (!this.nativeDraggable) {\n        this._onDragStart(tapEvt, true);\n      } else {\n        _on(dragEl, 'dragend', this);\n        _on(rootEl, 'dragstart', this._onDragStart);\n      }\n\n      try {\n        if (document.selection) {\n          // Timeout neccessary for IE9\n          setTimeout(function () {\n            document.selection.empty();\n          });\n        } else {\n          window.getSelection().removeAllRanges();\n        }\n      } catch (err) {}\n    },\n\n    _dragStarted: function _dragStarted() {\n      if (rootEl && dragEl) {\n        var options = this.options;\n\n        // Apply effect\n        _toggleClass(dragEl, options.ghostClass, true);\n        _toggleClass(dragEl, options.dragClass, false);\n\n        Sortable.active = this;\n\n        // Drag start event\n        _dispatchEvent(this, rootEl, 'start', dragEl, rootEl, oldIndex);\n      } else {\n        this._nulling();\n      }\n    },\n\n    _emulateDragOver: function _emulateDragOver() {\n      if (touchEvt) {\n        if (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY) {\n          return;\n        }\n\n        this._lastX = touchEvt.clientX;\n        this._lastY = touchEvt.clientY;\n\n        if (!supportCssPointerEvents) {\n          _css(ghostEl, 'display', 'none');\n        }\n\n        var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY),\n            parent = target,\n            i = touchDragOverListeners.length;\n\n        if (parent) {\n          do {\n            if (parent[expando]) {\n              while (i--) {\n                touchDragOverListeners[i]({\n                  clientX: touchEvt.clientX,\n                  clientY: touchEvt.clientY,\n                  target: target,\n                  rootEl: parent\n                });\n              }\n\n              break;\n            }\n\n            target = parent; // store last element\n          }\n          /* jshint boss:true */\n          while (parent = parent.parentNode);\n        }\n\n        if (!supportCssPointerEvents) {\n          _css(ghostEl, 'display', '');\n        }\n      }\n    },\n\n    _onTouchMove: function _onTouchMove( /**TouchEvent*/evt) {\n      if (tapEvt) {\n        var options = this.options,\n            fallbackTolerance = options.fallbackTolerance,\n            fallbackOffset = options.fallbackOffset,\n            touch = evt.touches ? evt.touches[0] : evt,\n            dx = touch.clientX - tapEvt.clientX + fallbackOffset.x,\n            dy = touch.clientY - tapEvt.clientY + fallbackOffset.y,\n            translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';\n\n        // only set the status to dragging, when we are actually dragging\n        if (!Sortable.active) {\n          if (fallbackTolerance && min(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY)) < fallbackTolerance) {\n            return;\n          }\n\n          this._dragStarted();\n        }\n\n        // as well as creating the ghost element on the document body\n        this._appendGhost();\n\n        moved = true;\n        touchEvt = touch;\n\n        _css(ghostEl, 'webkitTransform', translate3d);\n        _css(ghostEl, 'mozTransform', translate3d);\n        _css(ghostEl, 'msTransform', translate3d);\n        _css(ghostEl, 'transform', translate3d);\n\n        evt.preventDefault();\n      }\n    },\n\n    _appendGhost: function _appendGhost() {\n      if (!ghostEl) {\n        var rect = dragEl.getBoundingClientRect(),\n            css = _css(dragEl),\n            options = this.options,\n            ghostRect;\n\n        ghostEl = dragEl.cloneNode(true);\n\n        _toggleClass(ghostEl, options.ghostClass, false);\n        _toggleClass(ghostEl, options.fallbackClass, true);\n        _toggleClass(ghostEl, options.dragClass, true);\n\n        _css(ghostEl, 'top', rect.top - parseInt(css.marginTop, 10));\n        _css(ghostEl, 'left', rect.left - parseInt(css.marginLeft, 10));\n        _css(ghostEl, 'width', rect.width);\n        _css(ghostEl, 'height', rect.height);\n        _css(ghostEl, 'opacity', '0.8');\n        _css(ghostEl, 'position', 'fixed');\n        _css(ghostEl, 'zIndex', '100000');\n        _css(ghostEl, 'pointerEvents', 'none');\n\n        options.fallbackOnBody && document.body.appendChild(ghostEl) || rootEl.appendChild(ghostEl);\n\n        // Fixing dimensions.\n        ghostRect = ghostEl.getBoundingClientRect();\n        _css(ghostEl, 'width', rect.width * 2 - ghostRect.width);\n        _css(ghostEl, 'height', rect.height * 2 - ghostRect.height);\n      }\n    },\n\n    _onDragStart: function _onDragStart( /**Event*/evt, /**boolean*/useFallback) {\n      var dataTransfer = evt.dataTransfer,\n          options = this.options;\n\n      this._offUpEvents();\n\n      if (activeGroup.checkPull(this, this, dragEl, evt)) {\n        cloneEl = _clone(dragEl);\n\n        cloneEl.draggable = false;\n        cloneEl.style['will-change'] = '';\n\n        _css(cloneEl, 'display', 'none');\n        _toggleClass(cloneEl, this.options.chosenClass, false);\n\n        rootEl.insertBefore(cloneEl, dragEl);\n        _dispatchEvent(this, rootEl, 'clone', dragEl);\n      }\n\n      _toggleClass(dragEl, options.dragClass, true);\n\n      if (useFallback) {\n        if (useFallback === 'touch') {\n          // Bind touch events\n          _on(document, 'touchmove', this._onTouchMove);\n          _on(document, 'touchend', this._onDrop);\n          _on(document, 'touchcancel', this._onDrop);\n          _on(document, 'pointermove', this._onTouchMove);\n          _on(document, 'pointerup', this._onDrop);\n        } else {\n          // Old brwoser\n          _on(document, 'mousemove', this._onTouchMove);\n          _on(document, 'mouseup', this._onDrop);\n        }\n\n        this._loopId = setInterval(this._emulateDragOver, 50);\n      } else {\n        if (dataTransfer) {\n          dataTransfer.effectAllowed = 'move';\n          options.setData && options.setData.call(this, dataTransfer, dragEl);\n        }\n\n        _on(document, 'drop', this);\n        setTimeout(this._dragStarted, 0);\n      }\n    },\n\n    _onDragOver: function _onDragOver( /**Event*/evt) {\n      var el = this.el,\n          target,\n          dragRect,\n          targetRect,\n          revert,\n          options = this.options,\n          group = options.group,\n          activeSortable = Sortable.active,\n          isOwner = activeGroup === group,\n          isMovingBetweenSortable = false,\n          canSort = options.sort;\n\n      if (evt.preventDefault !== void 0) {\n        evt.preventDefault();\n        !options.dragoverBubble && evt.stopPropagation();\n      }\n\n      if (dragEl.animated) {\n        return;\n      }\n\n      moved = true;\n\n      if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list\n      : putSortable === this || (activeSortable.lastPullMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt)) && (evt.rootEl === void 0 || evt.rootEl === this.el) // touch fallback\n      ) {\n          // Smart auto-scrolling\n          _autoScroll(evt, options, this.el);\n\n          if (_silent) {\n            return;\n          }\n\n          target = _closest(evt.target, options.draggable, el);\n          dragRect = dragEl.getBoundingClientRect();\n\n          if (putSortable !== this) {\n            putSortable = this;\n            isMovingBetweenSortable = true;\n          }\n\n          if (revert) {\n            _cloneHide(activeSortable, true);\n            parentEl = rootEl; // actualization\n\n            if (cloneEl || nextEl) {\n              rootEl.insertBefore(dragEl, cloneEl || nextEl);\n            } else if (!canSort) {\n              rootEl.appendChild(dragEl);\n            }\n\n            return;\n          }\n\n          if (el.children.length === 0 || el.children[0] === ghostEl || el === evt.target && _ghostIsLast(el, evt)) {\n            //assign target only if condition is true\n            if (el.children.length !== 0 && el.children[0] !== ghostEl && el === evt.target) {\n              target = el.lastElementChild;\n            }\n\n            if (target) {\n              if (target.animated) {\n                return;\n              }\n\n              targetRect = target.getBoundingClientRect();\n            }\n\n            _cloneHide(activeSortable, isOwner);\n\n            if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt) !== false) {\n              if (!dragEl.contains(el)) {\n                el.appendChild(dragEl);\n                parentEl = el; // actualization\n              }\n\n              this._animate(dragRect, dragEl);\n              target && this._animate(targetRect, target);\n            }\n          } else if (target && !target.animated && target !== dragEl && target.parentNode[expando] !== void 0) {\n            if (lastEl !== target) {\n              lastEl = target;\n              lastCSS = _css(target);\n              lastParentCSS = _css(target.parentNode);\n            }\n\n            targetRect = target.getBoundingClientRect();\n\n            var width = targetRect.right - targetRect.left,\n                height = targetRect.bottom - targetRect.top,\n                floating = R_FLOAT.test(lastCSS.cssFloat + lastCSS.display) || lastParentCSS.display == 'flex' && lastParentCSS['flex-direction'].indexOf('row') === 0,\n                isWide = target.offsetWidth > dragEl.offsetWidth,\n                isLong = target.offsetHeight > dragEl.offsetHeight,\n                halfway = (floating ? (evt.clientX - targetRect.left) / width : (evt.clientY - targetRect.top) / height) > 0.5,\n                nextSibling = target.nextElementSibling,\n                after = false;\n\n            if (floating) {\n              var elTop = dragEl.offsetTop,\n                  tgTop = target.offsetTop;\n\n              if (elTop === tgTop) {\n                after = target.previousElementSibling === dragEl && !isWide || halfway && isWide;\n              } else if (target.previousElementSibling === dragEl || dragEl.previousElementSibling === target) {\n                after = (evt.clientY - targetRect.top) / height > 0.5;\n              } else {\n                after = tgTop > elTop;\n              }\n            } else if (!isMovingBetweenSortable) {\n              after = nextSibling !== dragEl && !isLong || halfway && isLong;\n            }\n\n            var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\n\n            if (moveVector !== false) {\n              if (moveVector === 1 || moveVector === -1) {\n                after = moveVector === 1;\n              }\n\n              _silent = true;\n              setTimeout(_unsilent, 30);\n\n              _cloneHide(activeSortable, isOwner);\n\n              if (!dragEl.contains(el)) {\n                if (after && !nextSibling) {\n                  el.appendChild(dragEl);\n                } else {\n                  target.parentNode.insertBefore(dragEl, after ? nextSibling : target);\n                }\n              }\n\n              parentEl = dragEl.parentNode; // actualization\n\n              this._animate(dragRect, dragEl);\n              this._animate(targetRect, target);\n            }\n          }\n        }\n    },\n\n    _animate: function _animate(prevRect, target) {\n      var ms = this.options.animation;\n\n      if (ms) {\n        var currentRect = target.getBoundingClientRect();\n\n        if (prevRect.nodeType === 1) {\n          prevRect = prevRect.getBoundingClientRect();\n        }\n\n        _css(target, 'transition', 'none');\n        _css(target, 'transform', 'translate3d(' + (prevRect.left - currentRect.left) + 'px,' + (prevRect.top - currentRect.top) + 'px,0)');\n\n        target.offsetWidth; // repaint\n\n        _css(target, 'transition', 'all ' + ms + 'ms');\n        _css(target, 'transform', 'translate3d(0,0,0)');\n\n        clearTimeout(target.animated);\n        target.animated = setTimeout(function () {\n          _css(target, 'transition', '');\n          _css(target, 'transform', '');\n          target.animated = false;\n        }, ms);\n      }\n    },\n\n    _offUpEvents: function _offUpEvents() {\n      var ownerDocument = this.el.ownerDocument;\n\n      _off(document, 'touchmove', this._onTouchMove);\n      _off(document, 'pointermove', this._onTouchMove);\n      _off(ownerDocument, 'mouseup', this._onDrop);\n      _off(ownerDocument, 'touchend', this._onDrop);\n      _off(ownerDocument, 'pointerup', this._onDrop);\n      _off(ownerDocument, 'touchcancel', this._onDrop);\n      _off(ownerDocument, 'pointercancel', this._onDrop);\n      _off(ownerDocument, 'selectstart', this);\n    },\n\n    _onDrop: function _onDrop( /**Event*/evt) {\n      var el = this.el,\n          options = this.options;\n\n      clearInterval(this._loopId);\n      clearInterval(autoScroll.pid);\n      clearTimeout(this._dragStartTimer);\n\n      // Unbind events\n      _off(document, 'mousemove', this._onTouchMove);\n\n      if (this.nativeDraggable) {\n        _off(document, 'drop', this);\n        _off(el, 'dragstart', this._onDragStart);\n      }\n\n      this._offUpEvents();\n\n      if (evt) {\n        if (moved) {\n          evt.preventDefault();\n          !options.dropBubble && evt.stopPropagation();\n        }\n\n        ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);\n\n        if (rootEl === parentEl || Sortable.active.lastPullMode !== 'clone') {\n          // Remove clone\n          cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);\n        }\n\n        if (dragEl) {\n          if (this.nativeDraggable) {\n            _off(dragEl, 'dragend', this);\n          }\n\n          _disableDraggable(dragEl);\n          dragEl.style['will-change'] = '';\n\n          // Remove class's\n          _toggleClass(dragEl, this.options.ghostClass, false);\n          _toggleClass(dragEl, this.options.chosenClass, false);\n\n          // Drag stop event\n          _dispatchEvent(this, rootEl, 'unchoose', dragEl, rootEl, oldIndex);\n\n          if (rootEl !== parentEl) {\n            newIndex = _index(dragEl, options.draggable);\n\n            if (newIndex >= 0) {\n              // Add event\n              _dispatchEvent(null, parentEl, 'add', dragEl, rootEl, oldIndex, newIndex);\n\n              // Remove event\n              _dispatchEvent(this, rootEl, 'remove', dragEl, rootEl, oldIndex, newIndex);\n\n              // drag from one list and drop into another\n              _dispatchEvent(null, parentEl, 'sort', dragEl, rootEl, oldIndex, newIndex);\n              _dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);\n            }\n          } else {\n            if (dragEl.nextSibling !== nextEl) {\n              // Get the index of the dragged element within its parent\n              newIndex = _index(dragEl, options.draggable);\n\n              if (newIndex >= 0) {\n                // drag & drop within the same list\n                _dispatchEvent(this, rootEl, 'update', dragEl, rootEl, oldIndex, newIndex);\n                _dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);\n              }\n            }\n          }\n\n          if (Sortable.active) {\n            /* jshint eqnull:true */\n            if (newIndex == null || newIndex === -1) {\n              newIndex = oldIndex;\n            }\n\n            _dispatchEvent(this, rootEl, 'end', dragEl, rootEl, oldIndex, newIndex);\n\n            // Save sorting\n            this.save();\n          }\n        }\n      }\n\n      this._nulling();\n    },\n\n    _nulling: function _nulling() {\n      rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = scrollEl = scrollParentEl = tapEvt = touchEvt = moved = newIndex = lastEl = lastCSS = putSortable = activeGroup = Sortable.active = null;\n\n      savedInputChecked.forEach(function (el) {\n        el.checked = true;\n      });\n      savedInputChecked.length = 0;\n    },\n\n    handleEvent: function handleEvent( /**Event*/evt) {\n      switch (evt.type) {\n        case 'drop':\n        case 'dragend':\n          this._onDrop(evt);\n          break;\n\n        case 'dragover':\n        case 'dragenter':\n          if (dragEl) {\n            this._onDragOver(evt);\n            _globalDragOver(evt);\n          }\n          break;\n\n        case 'selectstart':\n          evt.preventDefault();\n          break;\n      }\n    },\n\n    /**\n     * Serializes the item into an array of string.\n     * @returns {String[]}\n     */\n    toArray: function toArray() {\n      var order = [],\n          el,\n          children = this.el.children,\n          i = 0,\n          n = children.length,\n          options = this.options;\n\n      for (; i < n; i++) {\n        el = children[i];\n        if (_closest(el, options.draggable, this.el)) {\n          order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));\n        }\n      }\n\n      return order;\n    },\n\n    /**\n     * Sorts the elements according to the array.\n     * @param  {String[]}  order  order of the items\n     */\n    sort: function sort(order) {\n      var items = {},\n          rootEl = this.el;\n\n      this.toArray().forEach(function (id, i) {\n        var el = rootEl.children[i];\n\n        if (_closest(el, this.options.draggable, rootEl)) {\n          items[id] = el;\n        }\n      }, this);\n\n      order.forEach(function (id) {\n        if (items[id]) {\n          rootEl.removeChild(items[id]);\n          rootEl.appendChild(items[id]);\n        }\n      });\n    },\n\n    /**\n     * Save the current sorting\n     */\n    save: function save() {\n      var store = this.options.store;\n      store && store.set(this);\n    },\n\n    /**\n     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n     * @param   {HTMLElement}  el\n     * @param   {String}       [selector]  default: `options.draggable`\n     * @returns {HTMLElement|null}\n     */\n    closest: function closest(el, selector) {\n      return _closest(el, selector || this.options.draggable, this.el);\n    },\n\n    /**\n     * Set/get option\n     * @param   {string} name\n     * @param   {*}      [value]\n     * @returns {*}\n     */\n    option: function option(name, value) {\n      var options = this.options;\n\n      if (value === void 0) {\n        return options[name];\n      } else {\n        options[name] = value;\n\n        if (name === 'group') {\n          _prepareGroup(options);\n        }\n      }\n    },\n\n    /**\n     * Destroy\n     */\n    destroy: function destroy() {\n      var el = this.el;\n\n      el[expando] = null;\n\n      _off(el, 'mousedown', this._onTapStart);\n      _off(el, 'touchstart', this._onTapStart);\n      _off(el, 'pointerdown', this._onTapStart);\n\n      if (this.nativeDraggable) {\n        _off(el, 'dragover', this);\n        _off(el, 'dragenter', this);\n      }\n\n      // Remove draggable attributes\n      Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\n        el.removeAttribute('draggable');\n      });\n\n      touchDragOverListeners.splice(touchDragOverListeners.indexOf(this._onDragOver), 1);\n\n      this._onDrop();\n\n      this.el = el = null;\n    }\n  };\n\n  function _cloneHide(sortable, state) {\n    if (sortable.lastPullMode !== 'clone') {\n      state = true;\n    }\n\n    if (cloneEl && cloneEl.state !== state) {\n      _css(cloneEl, 'display', state ? 'none' : '');\n\n      if (!state) {\n        if (cloneEl.state) {\n          if (sortable.options.group.revertClone) {\n            rootEl.insertBefore(cloneEl, nextEl);\n            sortable._animate(dragEl, cloneEl);\n          } else {\n            rootEl.insertBefore(cloneEl, dragEl);\n          }\n        }\n      }\n\n      cloneEl.state = state;\n    }\n  }\n\n  function _closest( /**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx) {\n    if (el) {\n      ctx = ctx || document;\n\n      do {\n        if (selector === '>*' && el.parentNode === ctx || _matches(el, selector)) {\n          return el;\n        }\n        /* jshint boss:true */\n      } while (el = _getParentOrHost(el));\n    }\n\n    return null;\n  }\n\n  function _getParentOrHost(el) {\n    var parent = el.host;\n\n    return parent && parent.nodeType ? parent : el.parentNode;\n  }\n\n  function _globalDragOver( /**Event*/evt) {\n    if (evt.dataTransfer) {\n      evt.dataTransfer.dropEffect = 'move';\n    }\n    evt.preventDefault();\n  }\n\n  function _on(el, event, fn) {\n    el.addEventListener(event, fn, captureMode);\n  }\n\n  function _off(el, event, fn) {\n    el.removeEventListener(event, fn, captureMode);\n  }\n\n  function _toggleClass(el, name, state) {\n    if (el) {\n      if (el.classList) {\n        el.classList[state ? 'add' : 'remove'](name);\n      } else {\n        var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');\n        el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');\n      }\n    }\n  }\n\n  function _css(el, prop, val) {\n    var style = el && el.style;\n\n    if (style) {\n      if (val === void 0) {\n        if (document.defaultView && document.defaultView.getComputedStyle) {\n          val = document.defaultView.getComputedStyle(el, '');\n        } else if (el.currentStyle) {\n          val = el.currentStyle;\n        }\n\n        return prop === void 0 ? val : val[prop];\n      } else {\n        if (!(prop in style)) {\n          prop = '-webkit-' + prop;\n        }\n\n        style[prop] = val + (typeof val === 'string' ? '' : 'px');\n      }\n    }\n  }\n\n  function _find(ctx, tagName, iterator) {\n    if (ctx) {\n      var list = ctx.getElementsByTagName(tagName),\n          i = 0,\n          n = list.length;\n\n      if (iterator) {\n        for (; i < n; i++) {\n          iterator(list[i], i);\n        }\n      }\n\n      return list;\n    }\n\n    return [];\n  }\n\n  function _dispatchEvent(sortable, rootEl, name, targetEl, fromEl, startIndex, newIndex) {\n    sortable = sortable || rootEl[expando];\n\n    var evt = document.createEvent('Event'),\n        options = sortable.options,\n        onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);\n\n    evt.initEvent(name, true, true);\n\n    evt.to = rootEl;\n    evt.from = fromEl || rootEl;\n    evt.item = targetEl || rootEl;\n    evt.clone = cloneEl;\n\n    evt.oldIndex = startIndex;\n    evt.newIndex = newIndex;\n\n    rootEl.dispatchEvent(evt);\n\n    if (options[onName]) {\n      options[onName].call(sortable, evt);\n    }\n  }\n\n  function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {\n    var evt,\n        sortable = fromEl[expando],\n        onMoveFn = sortable.options.onMove,\n        retVal;\n\n    evt = document.createEvent('Event');\n    evt.initEvent('move', true, true);\n\n    evt.to = toEl;\n    evt.from = fromEl;\n    evt.dragged = dragEl;\n    evt.draggedRect = dragRect;\n    evt.related = targetEl || toEl;\n    evt.relatedRect = targetRect || toEl.getBoundingClientRect();\n    evt.willInsertAfter = willInsertAfter;\n\n    fromEl.dispatchEvent(evt);\n\n    if (onMoveFn) {\n      retVal = onMoveFn.call(sortable, evt, originalEvt);\n    }\n\n    return retVal;\n  }\n\n  function _disableDraggable(el) {\n    el.draggable = false;\n  }\n\n  function _unsilent() {\n    _silent = false;\n  }\n\n  /** @returns {HTMLElement|false} */\n  function _ghostIsLast(el, evt) {\n    var lastEl = el.lastElementChild,\n        rect = lastEl.getBoundingClientRect();\n\n    // 5 — min delta\n    // abs — нельзя добавлять, а то глюки при наведении сверху\n    return evt.clientY - (rect.top + rect.height) > 5 || evt.clientX - (rect.left + rect.width) > 5;\n  }\n\n  /**\n   * Generate id\n   * @param   {HTMLElement} el\n   * @returns {String}\n   * @private\n   */\n  function _generateId(el) {\n    var str = el.tagName + el.className + el.src + el.href + el.textContent,\n        i = str.length,\n        sum = 0;\n\n    while (i--) {\n      sum += str.charCodeAt(i);\n    }\n\n    return sum.toString(36);\n  }\n\n  /**\n   * Returns the index of an element within its parent for a selected set of\n   * elements\n   * @param  {HTMLElement} el\n   * @param  {selector} selector\n   * @return {number}\n   */\n  function _index(el, selector) {\n    var index = 0;\n\n    if (!el || !el.parentNode) {\n      return -1;\n    }\n\n    while (el && (el = el.previousElementSibling)) {\n      if (el.nodeName.toUpperCase() !== 'TEMPLATE' && (selector === '>*' || _matches(el, selector))) {\n        index++;\n      }\n    }\n\n    return index;\n  }\n\n  function _matches( /**HTMLElement*/el, /**String*/selector) {\n    if (el) {\n      selector = selector.split('.');\n\n      var tag = selector.shift().toUpperCase(),\n          re = new RegExp('\\\\s(' + selector.join('|') + ')(?=\\\\s)', 'g');\n\n      return (tag === '' || el.nodeName.toUpperCase() == tag) && (!selector.length || ((' ' + el.className + ' ').match(re) || []).length == selector.length);\n    }\n\n    return false;\n  }\n\n  function _throttle(callback, ms) {\n    var args, _this;\n\n    return function () {\n      if (args === void 0) {\n        args = arguments;\n        _this = this;\n\n        setTimeout(function () {\n          if (args.length === 1) {\n            callback.call(_this, args[0]);\n          } else {\n            callback.apply(_this, args);\n          }\n\n          args = void 0;\n        }, ms);\n      }\n    };\n  }\n\n  function _extend(dst, src) {\n    if (dst && src) {\n      for (var key in src) {\n        if (src.hasOwnProperty(key)) {\n          dst[key] = src[key];\n        }\n      }\n    }\n\n    return dst;\n  }\n\n  function _clone(el) {\n    return $ ? $(el).clone(true)[0] : Polymer && Polymer.dom ? Polymer.dom(el).cloneNode(true) : el.cloneNode(true);\n  }\n\n  function _saveInputCheckedState(root) {\n    var inputs = root.getElementsByTagName('input');\n    var idx = inputs.length;\n\n    while (idx--) {\n      var el = inputs[idx];\n      el.checked && savedInputChecked.push(el);\n    }\n  }\n\n  // Fixed #973: \n  _on(document, 'touchmove', function (evt) {\n    if (Sortable.active) {\n      evt.preventDefault();\n    }\n  });\n\n  try {\n    window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n      get: function get() {\n        captureMode = {\n          capture: false,\n          passive: false\n        };\n      }\n    }));\n  } catch (err) {}\n\n  // Export utils\n  Sortable.utils = {\n    on: _on,\n    off: _off,\n    css: _css,\n    find: _find,\n    is: function is(el, selector) {\n      return !!_closest(el, selector, el);\n    },\n    extend: _extend,\n    throttle: _throttle,\n    closest: _closest,\n    toggleClass: _toggleClass,\n    clone: _clone,\n    index: _index\n  };\n\n  /**\n   * Create sortable instance\n   * @param {HTMLElement}  el\n   * @param {Object}      [options]\n   */\n  Sortable.create = function (el, options) {\n    return new Sortable(el, options);\n  };\n\n  // Export\n  Sortable.version = '1.6.0';\n  return Sortable;\n});"},"hash":"a239ba6685f2bacac9f13be78f58142f"}